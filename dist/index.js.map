{
  "version": 3,
  "sources": ["src/index.ts"],
  "sourcesContent": ["/** Callback to inform of a value updates. */\ndeclare type Subscriber<T> = (value: T) => void\n\n/** Unsubscribes from value updates. */\ndeclare type Unsubscriber = () => void\n\n/** Callback to update a value. */\ndeclare type Updater<T> = (value: T) => T\n\n/** Readable interface for subscribing. */\nexport interface Readable<T> {\n  /**\n   * Subscribe on value changes.\n   * @param run subscription callback\n   * @param invalidate cleanup callback\n   */\n  subscribe(run: Subscriber<T>): Unsubscriber\n}\n\n/** Writable interface for both updating and subscribing. */\nexport interface Writable<T> extends Readable<T> {\n  /**\n   * Set value and inform subscribers.\n   * @param value to set\n   */\n  set(value: T): void\n  /**\n   * Update value using callback and inform subscribers.\n   * @param updater callback\n   */\n  update(updater: Updater<T>): void\n}\n\ntype ColorMode = string\n\nexport interface PerfectColorMode {\n  mode: Writable<ColorMode | undefined>\n  colorModes: ColorMode[]\n}\n\ndeclare global {\n  interface Window {\n    __perfect_dark_mode__: PerfectColorMode\n  }\n}\n\nwindow.__perfect_dark_mode__ = ((): PerfectColorMode => {\n  const colorModes = ['light', 'dark']\n  const colorModeKey = 'perfect-dark-mode'\n\n  type ColorModeOS = Readable<ColorMode | undefined>\n  const colorModeOS: ColorModeOS = ((): ColorModeOS => {\n    const matchesToMode = (matches: boolean): ColorMode =>\n      matches ? 'dark' : 'light'\n    const listeners = new Set<Function>()\n    const mediaQuery = matchMedia('(prefers-color-scheme: dark)')\n    let colorMode: ColorMode | undefined\n    const onChangeMediaQuery = (e: { matches: boolean }) => {\n      const newMode = matchesToMode(e.matches)\n      colorMode = newMode\n      listeners.forEach((cb) => cb(newMode))\n    }\n    mediaQuery.addEventListener\n      ? mediaQuery.addEventListener('change', onChangeMediaQuery)\n      : mediaQuery.addListener(onChangeMediaQuery)\n    onChangeMediaQuery(mediaQuery)\n    return {\n      subscribe(cb) {\n        cb(colorMode)\n        listeners.add(cb)\n        return () => {\n          listeners.delete(cb)\n        }\n      },\n    }\n  })()\n\n  type ColorModeSaved = Writable<ColorMode | undefined>\n  const colorModeSaved: ColorModeSaved = ((): ColorModeSaved => {\n    const parseColorMode = (mode: string | null): ColorMode | undefined =>\n      mode\n        ? colorModes.includes(mode)\n          ? (mode as ColorMode)\n          : colorModes[0]\n        : undefined\n    const listeners = new Set<Function>()\n    let mode: ColorMode | undefined\n    const set = (colorMode?: ColorMode) => {\n      if (colorMode !== undefined) {\n        localStorage.setItem(colorModeKey, colorMode)\n      } else {\n        localStorage.removeItem(colorModeKey)\n      }\n      listeners.forEach((cb) => cb(colorMode))\n      mode = colorMode\n    }\n    const savedMode = localStorage.getItem(colorModeKey)\n    const colorMode = parseColorMode(savedMode)\n    mode = colorMode\n    return {\n      subscribe: (cb) => {\n        cb(colorMode)\n        listeners.add(cb)\n        return () => listeners.delete(cb)\n      },\n      set,\n      update: (updater) => set(updater(mode)),\n    }\n  })()\n\n  const colorModeSavedOrColorModeOS: ColorModeSaved = ((): ColorModeSaved => {\n    let cmSaved: ColorMode | undefined\n    let cmOS: ColorMode | undefined\n    const getMerged = () => cmSaved || cmOS\n    const listeners = new Set<Function>()\n    colorModeSaved.subscribe((v) => {\n      cmSaved = v\n      listeners.forEach((cb) => cb(getMerged()))\n    })\n    colorModeOS.subscribe((v) => {\n      cmOS = v\n      listeners.forEach((cb) => cb(getMerged()))\n    })\n    return {\n      subscribe: (listener) => {\n        listeners.add(listener)\n        listener(getMerged())\n        return () => listeners.delete(listener)\n      },\n      set: colorModeSaved.set,\n      update: colorModeSaved.update,\n    }\n  })()\n\n  const htmlElement = document.documentElement\n  let colorMode: string | undefined\n  colorModeSavedOrColorModeOS.subscribe((v) => {\n    if (colorMode) {\n      htmlElement.classList.remove(colorMode)\n    }\n    if (v) {\n      htmlElement.classList.add(v)\n    }\n    colorMode = v\n  })\n\n  return {\n    mode: colorModeSavedOrColorModeOS,\n    colorModes,\n  }\n})()\n"],
  "mappings": "AA8CA,OAAO,sBAAyB,MAC9B,KAAM,GAAa,CAAC,QAAS,QACvB,EAAe,oBAGf,EAA4B,MAChC,KAAM,GAAgB,AAAC,GACrB,EAAU,OAAS,QACf,EAAY,GAAI,KAChB,EAAa,WAAW,gCAC9B,GAAI,GACJ,KAAM,GAAqB,AAAC,IAC1B,KAAM,GAAU,EAAc,EAAE,SAChC,EAAY,EACZ,EAAU,QAAQ,AAAC,GAAO,EAAG,KAE/B,SAAW,iBACP,EAAW,iBAAiB,SAAU,GACtC,EAAW,YAAY,GAC3B,EAAmB,GACZ,CACL,UAAU,GACR,SAAG,GACH,EAAU,IAAI,GACP,KACL,EAAU,OAAO,UAOnB,EAAkC,MACtC,KAAM,GAAiB,AAAC,GACtB,EACI,EAAW,SAAS,GACjB,EACD,EAAW,GACb,OACA,EAAY,GAAI,KACtB,GAAI,GACJ,KAAM,GAAM,AAAC,IACX,AAAI,IAAc,OAChB,aAAa,QAAQ,EAAc,GAEnC,aAAa,WAAW,GAE1B,EAAU,QAAQ,AAAC,GAAO,EAAG,IAC7B,EAAO,GAEH,EAAY,aAAa,QAAQ,GACjC,EAAY,EAAe,GACjC,SAAO,EACA,CACL,UAAW,AAAC,GACV,GAAG,GACH,EAAU,IAAI,GACP,IAAM,EAAU,OAAO,IAEhC,MACA,OAAQ,AAAC,GAAY,EAAI,EAAQ,SAI/B,EAA+C,MACnD,GAAI,GACA,EACJ,KAAM,GAAY,IAAM,GAAW,EAC7B,EAAY,GAAI,KACtB,SAAe,UAAU,AAAC,IACxB,EAAU,EACV,EAAU,QAAQ,AAAC,GAAO,EAAG,QAE/B,EAAY,UAAU,AAAC,IACrB,EAAO,EACP,EAAU,QAAQ,AAAC,GAAO,EAAG,QAExB,CACL,UAAW,AAAC,GACV,GAAU,IAAI,GACd,EAAS,KACF,IAAM,EAAU,OAAO,IAEhC,IAAK,EAAe,IACpB,OAAQ,EAAe,YAIrB,EAAc,SAAS,gBAC7B,GAAI,GACJ,SAA4B,UAAU,AAAC,IACrC,AAAI,GACF,EAAY,UAAU,OAAO,GAE/B,AAAI,GACF,EAAY,UAAU,IAAI,GAE5B,EAAY,IAGP,CACL,KAAM,EACN",
  "names": []
}
